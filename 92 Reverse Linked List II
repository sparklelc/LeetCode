Easy题目:
链表的原地顺序调换
For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,
return 1->4->3->2->5->NULL.

主要就是想清楚指针怎么变:
网上别人的代码:
public ListNode reverseBetween(ListNode head, int m, int n) {
    if(head == null) return null;
    ListNode dummy = new ListNode(0); // create a dummy node to mark the head of this list
    dummy.next = head;
    ListNode pre = dummy; // make a pointer pre as a marker for the node before reversing
    for(int i = 0; i<m-1; i++) pre = pre.next;

    ListNode start = pre.next; // a pointer to the beginning of a sub-list that will be reversed
    ListNode then = start.next; // a pointer to a node that will be reversed

    // 1 - 2 -3 - 4 - 5 ; m=2; n =4 ---> pre = 1, start = 2, then = 3
    // dummy-> 1 -> 2 -> 3 -> 4 -> 5

    for(int i=0; i<n-m; i++)
    {
        start.next = then.next;
        then.next = pre.next;
        pre.next = then;
        then = start.next;
    }
    // first reversing : dummy->1 - 3 - 2 - 4 - 5; pre = 1, start = 2, then = 4
    // second reversing: dummy->1 - 4 - 3 - 2 - 5; pre = 1, start = 2, then = 5 (finish)

    return dummy.next;
}


我的代码:
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        ListNode result = new ListNode(0);
        result.next = head;
        ListNode resultNode = result;
        
        ListNode nextNode = head;
        ListNode mid = null;

        for(int i=1; i<m; i++){
            resultNode = resultNode.next;
            nextNode = nextNode.next;
        }
        
        ListNode midNext = nextNode;
        for(int i=1; i<=n-m+1; i++){
            ListNode tem = nextNode.next;
            nextNode.next = mid;
            mid = nextNode;
            nextNode = tem;
        }
        
        if(mid != null){
            resultNode.next = mid;
            resultNode = midNext;
        }
        midNext.next = nextNode;
            
        return result.next;
    }
}
