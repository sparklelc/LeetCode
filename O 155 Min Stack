mid*:
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.


思路：
只有push和pop需要修改元素,　top和getMin只需要获取元素
push:    MAX_VALUE    :        0       -1    2    3    -4    -8    5
stack:   MAX_VALUE    :   -MAX_VALUE   -1    3    4    -3    -4    13      　　存push-last_min, 如果为负，更新last_min成push
min:     MAX_VALUE    :        *0     *-1    -1   -1   *-4   *-8   -8          存最小值，*表示更新min的值


注意要用long来防止溢出



//参照别人思路我的代码：
public class MinStack {
    long min = Integer.MAX_VALUE;
    LinkedList<Long> stack = new LinkedList();
    
    public MinStack() {
        stack.addLast(min);
    }
    
    public void push(int x) {
        stack.addLast(x - min);
        if (x < min)
            min = x;
    }
    
    public void pop() {
        long item = stack.pollLast();
        if (item < 0)
            min = min - item;
    }
    
    public int top() {
        if (stack.getLast() < 0)
            return (int) min;
        long result = stack.getLast() + min;
        return (int) result;
    }
    
    public int getMin() {
        return (int) min;
    }
}
