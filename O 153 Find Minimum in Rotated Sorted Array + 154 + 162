153 Mid:
Suppose a sorted array is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
Find the minimum element.
You may assume no duplicate exists in the array.


思路：
我一开始直接遍历数组了，O(n), 也通过了
应该用二分查找，O(lgn)


我的二分查找代码：
public class Solution {
    public int findMin(int[] nums) {
        int low = 0;
        int high = nums.length - 1;
        while (low < high) {
            int mid = (low + high) / 2;
            if (mid == low) return Math.min(nums[mid], nums[high]);
            if (nums[mid] > nums[high])
                low = mid;
            else 
                high = mid;
        }
        return nums[low];
    }
}

********************************************************

154 Mid
在上面一题的基础上，可能出现重复的元素
如［3, 3, 3, 1, 3］和 [3, 1 ,3, 3, 3]

我的二分代码：
public class Solution {
    public int findMin(int[] nums) {
        int low = 0;
        int high = nums.length - 1;
        while (low < high) {
            int mid = (low + high)/2;
            if (mid == low)
                return Math.min(nums[mid], nums[high]);
            if (nums[mid] == nums[high])　　　　　　　　　　　　　　// 如果相等，只减少一个元素，而非二分
                high--;
            else if (nums[mid] > nums[high])
                low = mid;
            else
                high = mid;
        }
        return nums[low];
    }
}


*************************************************
Mid
162 Find Peak Element
A peak element is an element that is greater than its neighbors.
Given an input array where num[i] ≠ num[i+1], find a peak element and return its index.
The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.
You may imagine that num[-1] = num[n] = -∞.
For example, in array [1, 2, 3, 1], 3 is a peak element and your function should return the index number 2.
任意找一个峰值的位置返回


思路:用二分查找

//我的代码:
public class Solution {
    public int findPeakElement(int[] nums) {
        int low = 0;
        int high = nums.length-1;
        if (nums.length == 1)
            return 0;
        
        while (true) {
            int mid = (low + high)/2;
            if ((mid == 0 && nums[mid] > nums[mid+1]) || 
                (mid == nums.length-1 && nums[mid-1]<nums[mid]) || 
                (nums[mid] > nums[mid+1] && nums[mid-1] < nums[mid]))
                return mid;
            else if (nums[mid] > nums[mid+1]) {
                high = mid-1;                   
            } else {
                low = mid+1;                        //注意是mid+1, 不能是mid，mid会跳不出循环，如[1，2]
            }
        }
    }
}
