Easy题目
返回全部有效的ip地址
如：Given "25525511135",
return ["255.255.11.135", "255.255.111.35"].

可以用递归dfs或则基于栈的dfs来做，也可以用下面的做法：
主要这题ip地址最多就16位，所以效率差异不大，用下面做法来做比较简单，直接用0,i,j,k,len把ip地址分成4段。
别人的代码，复杂度O(n^3):
public class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> res = new ArrayList<String>();
        int len = s.length();
        for(int i = 1; i<4 && i<len-2; i++){
            for(int j = i+1; j<i+4 && j<len-1; j++){
                for(int k = j+1; k<j+4 && k<len; k++){
                    String s1 = s.substring(0,i), s2 = s.substring(i,j), s3 = s.substring(j,k), s4 = s.substring(k,len);
                    if(isValid(s1) && isValid(s2) && isValid(s3) && isValid(s4)){
                        res.add(s1+"."+s2+"."+s3+"."+s4);
                    }
                }
            }
        }
        return res;
    }
    public boolean isValid(String s){
        if(s.length()>3 || s.length()==0 || (s.charAt(0)=='0' && s.length()>1) || Integer.parseInt(s)>255)
            return false;
        return true;
    }
}


我的代码:
import java.util.LinkedList;
public class Solution {
    public List<String> restoreIpAddresses(String s) {
        int sLen = s.length();
        List<String> result = new LinkedList<String>();
        if(s.length() == 0) 
            return result;
        LinkedList<LinkedList<Integer>> tem = new LinkedList<LinkedList<Integer>>();
        LinkedList<Integer> temlen = new LinkedList<Integer>();
        tem.addLast(new LinkedList<Integer>());
        temlen.addLast(0);
        
        for(int i=1; i<=4; i++){
            int len = tem.size();
            for(int j=0; j<len; j++){
                LinkedList<Integer> temlist = tem.getFirst();
                tem.removeFirst();
                int temlistlen = temlen.getFirst();
                temlen.removeFirst();
                
                for(int k=3; k>=1; k--){
                    if(s.charAt(temlistlen) == '0'){
                        k = 1;
                        if(sLen - temlistlen - k <= (4-i)*3 && sLen - temlistlen - k >= 4-i){
                            LinkedList<Integer> newlist = new LinkedList<Integer>(temlist);
                            int newtemlistlen = temlistlen + k;
                            Integer inte = Integer.valueOf(s.substring(temlistlen, temlistlen+k));
                            if(inte < 256){
                                newlist.addLast(inte);
                                temlen.addLast(newtemlistlen);
                                tem.addLast(newlist);
                            }
                        }
                        break;
                    }
                    
                    if(i!=4 && sLen - temlistlen - k <= (4-i)*3 && sLen - temlistlen - k >= 4-i){
                        LinkedList<Integer> newlist = new LinkedList<Integer>(temlist);
                        int newtemlistlen = temlistlen + k;
                        Integer inte = Integer.valueOf(s.substring(temlistlen, temlistlen+k));
                        if(inte < 256){
                            newlist.addLast(inte);
                            temlen.addLast(newtemlistlen);
                            tem.addLast(newlist);
                        }
                    }else if(i==4){
                        if(sLen - temlistlen<=3 && sLen - temlistlen >= 1){
                            k = sLen - temlistlen;
                            LinkedList<Integer> newlist = new LinkedList<Integer>(temlist);
                            int newtemlistlen = temlistlen + k;
                            Integer inte = Integer.valueOf(s.substring(temlistlen, temlistlen+k));
                            if(inte < 256){
                                newlist.addLast(inte);
                                temlen.addLast(newtemlistlen);
                                tem.addLast(newlist);
                            }
                        }
                        break;
                    }
                    
                }
            }
        }
        for(LinkedList<Integer> list:tem){
            StringBuffer buf = new StringBuffer();
            int i = 1;
            for(Integer inte:list){
                buf.append(inte.toString());
                if(i!=4){
                    buf.append('.');
                    i++;
                }
            }
            ((LinkedList) result).addLast(buf.toString());
        }
        return result;
    }
}
