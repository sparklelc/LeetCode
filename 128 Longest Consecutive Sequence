Hard:
Given an unsorted array of integers, find the length of the longest consecutive elements sequence.
For example,
Given [100, 4, 200, 1, 3, 2],
The longest consecutive elements sequence is [4, 1, 3, 2] => [1, 2, 3, 4]. Return its length: 4.
Your algorithm should run in O(n) complexity.

分几种情况：
1. 加入的点之间没加过
   1.1 和左边的段合并
   1.2 和右边的段合并
   1.3 该点正好在左边的段和右边的段之间
2. 该点已经加过，则直接跳过



别人的代码：
每个节点存连续段的长度，每次只用修改段的边缘节点，同时记录本节点已说明该值出现过（下次再出现直接跳过）。
public int longestConsecutive(int[] num) {
    int res = 0;
    HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
    for (int n : num) {
        if (!map.containsKey(n)) {
            int left = (map.containsKey(n - 1)) ? map.get(n - 1) : 0;
            int right = (map.containsKey(n + 1)) ? map.get(n + 1) : 0;
            // sum: length of the sequence n is in
            int sum = left + right + 1;
            map.put(n, sum);

            // keep track of the max length 
            res = Math.max(res, sum);

            // extend the length to the boundary(s)
            // of the sequence
            // will do nothing if n has no neighbors
            map.put(n - left, sum);
            map.put(n + right, sum);
        }
        else {
            // duplicates
            continue;
        }
    }
    return res;
}


按我自己想法的代码：
总结：
    1. 无需用Node来存储max和min的值，直接存len就可以
    2. 无需太多的判断情况
    
class Node {
    int max;
    int min;
    public Node(int m, int n) {
        this.max = m;
        this.min = n;
    }
}

public class Solution {
    public int longestConsecutive(int[] nums) {
        if (nums.length == 0)
            return 0;
        int result = 1;
        HashMap<Integer, Node> map = new HashMap<Integer, Node>();
        HashSet<Integer> found = new HashSet<Integer>();
        
        for (int i=0; i<nums.length; i++) {
            if (found.contains(nums[i]))
                continue;
            found.add(nums[i]);
            
            if (map.containsKey(nums[i]-1) && map.containsKey(nums[i]+1)) {   
                Node leftNode = map.get(nums[i]-1);
                Node rightNode = map.get(nums[i]+1);
                leftNode.max = rightNode.max;
                if (leftNode.min != nums[i]-1)
                    map.remove(nums[i]-1);
                if (leftNode.max != nums[i]+1)
                    map.remove(nums[i]+1);
                map.put(leftNode.max, leftNode);
                result = leftNode.max - leftNode.min + 1 > result ? leftNode.max - leftNode.min + 1 : result;
                System.out.println(leftNode.max + " " + leftNode.min);
            } else if (map.containsKey(nums[i]+1)) {
                Node node = map.get(nums[i] + 1);
                node.min = nums[i];
                if (node.max != nums[i]+1)
                    map.remove(nums[i]+1);
                map.put(nums[i], node);
                result = node.max - node.min + 1 > result ? node.max - node.min + 1 : result;
            } else if (map.containsKey(nums[i]-1)) {
                Node node = map.get(nums[i] - 1);
                node.max = nums[i];
                if (node.min != nums[i]-1)
                    map.remove(nums[i]-1);
                map.put(nums[i], node);
                result = node.max - node.min + 1 > result ? node.max - node.min + 1 : result;
            } else {
                Node node = new Node(nums[i], nums[i]);
                map.put(nums[i], node);
            }
        }
        
        return result;
    }
}
