Mid:
All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: "ACGAATTCCG". 
When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.
Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.

For example,
Given s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT", Return:["AAAAACCCCC", "CCCCCAAAAA"].
For   s = "AAAAAAAAAAA",                      Return["AAAAAAAAAA"].



思路：
1. 一开始想用动归，复杂度O(n^2), 超时
2. 发现字符串固定是10字符，用hashset做，复杂度O(10*n)



//我的代码：
public class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        ArrayList<String> result = new ArrayList<String>();
        if (s == null || s.length() < 11)
            return result;
            
        HashSet<String> set = new HashSet<String>();
        HashSet<String> resultSet = new HashSet<String>();
        for (int i=0; i<=s.length()-10; i++) {
            String str = s.substring(i, i+10);
            //System.out.println(str);
            if (set.contains(str))
                resultSet.add(str);
            else
                set.add(str);
        }
        for (String str: resultSet)
            result.add(str);
        return result;
    }
}



//别人代码，本质上是优化hashcode的计算，因为每次移位实际上只修改了第一位和最后一位的字符
public class Solution {
    public List<String> findRepeatedDnaSequences(String DNA) {
        ArrayList<String> res = new ArrayList<String>();
        if(DNA.length()<10)    return res;
        HashSet<Integer> once = new HashSet<Integer>();                 //用Integer直接存自定义的hashcode
        HashSet<Integer> twice = new HashSet<Integer>();
        int[] map = new int[26];
        map['A'-'A'] = 0;
        map['C'-'A'] = 1;
        map['G'-'A'] = 2;
        map['T'-'A'] = 3;
        int enc = 0;
        for(int i=0; i<9; ++i){
            enc <<=2;
            enc |= map[DNA.charAt(i)-'A'];
        }
        for(int j=9; j<DNA.length(); ++j){
            enc <<=2;
            enc &= 0xfffff;
            enc |= map[DNA.charAt(j)-'A'];
            if(!once.add(enc) && twice.add(enc))
                res.add(DNA.substring(j-9,j+1));
        }
        return res;
    }
}


*********************************************************
190 Easy: Reverse Bits
Reverse bits of a given 32 bits unsigned integer.
For example, given input 43261596 (represented in binary as 00000010 10010100 00011110 10011100), 
                 return 964176192 (represented in binary as 00111001 01111000 00101001 01000000).
                 
思路：
除以2求模来判断每一位是1还是0，注意这里是unsigner integer，范围是四十多亿，所以不能直接用除法和求模，要用位操作。
注意：^是异或符号，不是求次方

//我的代码：
public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        int result = 0;
        for (int index = 31; index>=0; index--) {
            int c = n & 1;
            if (c == 1) {
                result |= 1<<index;
            }
            n = n >>> 1;
        }
        return result;
    }
}

*********************************************************
198	House Robber: Easy
You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, 
the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and 
it will automatically contact the police if two adjacent houses were broken into on the same night.
不允许偷相邻的两家人。


思路:
动归, 但空间上可以优化到O(1), 不需要用数组


//我的代码
public class Solution {
    public int rob(int[] nums) {
        int[] robbed = new int[nums.length+1];
        int[] norobbed = new int[nums.length+1];                //其实不需要用数组,直接保存上一个值就可以了,int prevNorobbed
        for (int i=1; i<=nums.length; i++) {
            robbed[i] = norobbed[i-1] + nums[i-1];
            norobbed[i] = Math.max(robbed[i-1], norobbed[i-1]);
        }
        return Math.max(robbed[nums.length], norobbed[nums.length]);
    }
}


*********************************************************
199	Binary Tree Right Side View: Easy
  Given the following binary tree,
   1            <---  1
 /   \
2     3         <---  3
 \     
  5             <---  5
  You should return [1, 3, 5].
  
  
思路:
我直接用level遍历每层，用stack保存每层所有元素
别人用递归来做，空间效率更高，当然时间复杂度都是O(n)


//别人代码：
public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        ArrayList list = new ArrayList();
        rightSideView(root, 0, list);
        return list;
    }

    public void rightSideView(TreeNode root, int level, ArrayList list) {
        if(root == null) return;
        if(list.size() == level)
            list.add(root.val);

        rightSideView(root.right, level + 1, list);
        rightSideView(root.left, level + 1, list);
    }
}
