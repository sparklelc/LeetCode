Hard题目：
Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.   意思：看s1和s2能否交错拼接成s3
For example,
Given:
s1 = "aabcc",
s2 = "dbbca",
When s3 = "aadbbcbcac", return true.
When s3 = "aadbbbaccc", return false.

#######################
思路：用二维动态规划来做
示例：s1="aa",s2="ab",s3="aaba"。 
      标1的为可行(用boolean比用0,1要好)。最终返回右下角。
    0  a  b
0   1  1  0
a   1  1  1
a   1  0  1


################
网上二维动规代码：
 bool isInterleave(string s1, string s2, string s3) {
    if(s3.length() != s1.length() + s2.length())
        return false;

    bool table[s1.length()+1][s2.length()+1];

    for(int i=0; i<s1.length()+1; i++)
        for(int j=0; j< s2.length()+1; j++){
            if(i==0 && j==0)
                table[i][j] = true;
            else if(i == 0)
                table[i][j] = ( table[i][j-1] && s2[j-1] == s3[i+j-1]);
            else if(j == 0)
                table[i][j] = ( table[i-1][j] && s1[i-1] == s3[i+j-1]);
            else
                table[i][j] = (table[i-1][j] && s1[i-1] == s3[i+j-1] ) || (table[i][j-1] && s2[j-1] == s3[i+j-1] );
        }

    return table[s1.length()][s2.length()];
}

####################
我参照网上思路的代码：
public class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if(s3.length() != s2.length() + s1.length())
            return false;
            
        int[][] result = new int[s1.length()+1][s2.length()+1];
        result[0][0] = 1;
        
        for(int i=1; i<=s1.length(); i++){
            if(result[i-1][0] != 0 && s1.charAt(i-1)==s3.charAt(i-1))
                result[i][0] = 1;
            else
                result[i][0] = 0;
        }
        for(int j=1; j<=s2.length(); j++){
            if(result[0][j-1] != 0 && s2.charAt(j-1)==s3.charAt(j-1))
                result[0][j] = 1;
            else
                result[0][j] = 0;
        }
        
        for(int i=1; i<=s1.length(); i++){
            for(int j=1; j<=s2.length(); j++){
                                                                      //这个地方弄了很久，应该是s3.charAt(i+j-1)而非s3.charAt(i+j-2)
                if(result[i][j-1] == 1 && s2.charAt(j-1)==s3.charAt(i+j-1))
                    result[i][j] = 1;
                else if(result[i-1][j] == 1 && s1.charAt(i-1)==s3.charAt(i+j-1))
                    result[i][j] = 1;
                else
                    result[i][j] = 0;
            }
        }
        
        if(result[s1.length()][s2.length()]==1)
            return true;
        else
            return false;
    }
}
