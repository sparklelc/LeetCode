Hard:
218 The Skyline Problem
https://leetcode.com/problems/the-skyline-problem/
在二维坐标上做多个长方形,找出转折点的坐标


我的思路:
一开始想到线段树，但不熟悉线段树的建子树条件，所以用linked-node代替线段树。
由于题目说了输入顺序是按照x的坐标递增的。
最坏复杂度O(N^2), N为建筑数目

别人思路：（可以看成：近似实现了删除操作的最大堆）
用最大堆heap和HashMap，把起点和终点（进行封装后,通过type区分起点终点）一起按位置进行排序，对起点用push操作把height压到heap里面
。对于终点，在hashmap找到对应的key=height，value++,表示隐性删除该高度多一次，heap检查自己的top是否需要删除。
heap根据height进行排序。
实际根本思路是用最大堆，但堆不支持删除操作，所以要配合hashmap来用，延迟删除堆中元素。
   大致好像是这样，具体可以看http://www.cnblogs.com/easonliu/p/4531020.html
   其中代码mp[h]用于标志该高度之后需要隐式删除多少次。
   可以参照https://briangordon.github.io/2014/08/the-skyline-problem.html的图
复杂度O(N*lgN)


//我的代码,beat 100%
public class Solution {
    public List<int[]> getSkyline(int[][] buildings) {
        Segment seg = new Segment();
        for (int[] input: buildings)
            seg.add(input[0], input[1], input[2]);
            
        ArrayList<int[]> list = new ArrayList<int[]>();
        Node node = seg.root;
        int lastHeight = -1;
        while (node != null) {
            int[] arr = new int[2];
            arr[0] = node.start;
            arr[1] = node.height;
            if ((arr[0] != 0 || arr[1] != 0) && arr[1]!=lastHeight)         //去掉重复高度的段
                list.add(arr);
            lastHeight = arr[1];
            node = node.next;
        }
        return list;
    }
}

class Node {                                        //Node记录每个段的起点以及高度
    int start;
    int height;
    Node next;
    public Node(int s, int h) {
        this.start = s;
        this.height = h;
    }
}

class Segment {                                     //段集合
    public Node root = null;
    Node last = null;                               //记录上次的段，因为输入是按照x递增的，所以直接从上次段开始向后找
    public Segment() {
        root = new Node(0, 0);
        last = root;
    }
    
    public void add(int begin, int end, int h) {
        Node node = last;
        while (node.start < begin && node.next != null && node.next.start <= begin) {
            node = node.next;
        }
        
        last = node;
        int lastHeight = node.height;
        if (node.start == begin) {
            node.height = Math.max(node.height, h);
        } else {
            if (node.height < h) {
                Node tem = node.next;
                node.next = new Node(begin, h);
                node.next.next = tem;
                last = node.next;
            }
        }
        
        node = last;
        while (node.next != null && node.next.start < end) {
            lastHeight = node.next.height;
            if (node.height == node.next.height) {                       //合并同样高度的段
                node.next = node.next.next;
            } else {
                if (node.next.height < h)
                    node.next.height = h;
                node = node.next;
            }
        }
        if ((node.next == null || node.next.start > end) && lastHeight < h) {
            Node tem = node.next;
            node.next = new Node(end, lastHeight);
            node.next.next = tem;
        }
    }
}



***************************************************************
Mid
220 Contains Duplicate III
Given an array of integers, find out whether there are two distinct indices i and j in the array 
such that the difference between nums[i] and nums[j] is at most t and the difference between i and j is at most k.
也就是如果存在|nums[i]-nums[j]|<=t 而且 |i-j|<=k，返回true


我的思路：
最坏O(K*N)，虽然beat 98%，但比较trick，所以不说了, 主要用链表(利用hashmap优化链表中元素的删除)。

别人思路：
1. 用TreeSet,复杂度O(N*lgK)
2. 分段，如果每段中存在两个数，返回true，否则判断与相邻的段的值。O(N)

TreeSet-API:
    add, contains, remove
    higher, lower       返回大于, 小于key的值
    ceiling, floor      返回大于等于，小于等于key的值
TreeMap-API:
    put, containsKey, remove
    higherKey, lowerKey
    ceilingKey, floorKey

负数求余：
    (-7)%(-5) = -2
      7 %(-5) =  2
    (-7)%  5  = -2      把除数和被除数化成整数来求余，再根据除数正负号给结果加正负号
负整数除法：
    (-7)/(-5) =  1
      7 /(-5) = -1
    (-7)/  5  = -1      把除数和被除数化成整数来除，再根据除法正负给结果加正负号


//根据别人TreeSet我的代码：
public class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        TreeSet<Integer> set = new TreeSet<Integer>();
        if (t < 0) return false;
        for (int i=0; i<nums.length; i++) {
            if (i-k>0) set.remove(nums[i-k-1]);
            Integer lower=set.lower(nums[i]);
            Integer higher=set.higher(nums[i]);
            if (set.contains(nums[i]) || 
                (lower != null && nums[i]-(long)lower <= t) || 
                (higher != null && higher-(long)nums[i]<=t))
                return true;
            set.add(nums[i]);
        }
        return false;
    }
}

//根据别人分段思路我写的代码：
public class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if (t < 0) return false;
        HashMap<Long, Long> map = new HashMap<Long, Long>();           //存段位置和段里面的值
        for (int i=0; i<nums.length; i++) {
            if (i-k > 0) 
                map.remove(getId(nums[i-k-1], t));
                
            long id = getId(nums[i], t);
            if (map.containsKey(id))
                return true;
            if (map.containsKey(id-1) && nums[i]-map.get(id-1)<=t)
                return true;
            if (map.containsKey(id+1) && map.get(id+1)-nums[i]<=t)
                return true;
                
            map.put(id, (long) nums[i]);
        }
        return false;
    }
    
    public long getId(int i, int t) {
        w = t+1;
        return i<0? (i+1)/w-1: i/w;     //对负数分组的方法，这种做法只对离散i有效，不能写成(i-1)/w   ! ! !
    }
}

