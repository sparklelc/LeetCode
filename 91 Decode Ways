Easy题目：注意不要用递归，用动态规划
'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.
For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).
The number of ways decoding "12" is 2.

原本我用递归从后向前做，但超时了。后来还是换成动态规划来做，从前向后做。
这题要注意几点，比如230有0种方法， 100也是0种方法， 120有1种方法（即result[i] = result[i-2]，  ‘1’+‘20’）

public class Solution {
    public int numDecodings(String s) {
        if(s.length()==0)
            return 0;
            
        int[] result = new int[s.length()+1];
        result[0] = 1;
        int i=1;
        while(s.charAt(i-1) == '0'){
            i++;
            if(i == s.length()+1)
                return 0;
        }
        
        for(; i<=s.length(); i++){
            if(i>=2 && (s.charAt(i-2)=='0' || s.charAt(i-2)>='3') && s.charAt(i-1)=='0')
                return 0;
            else if(i>=2 && s.charAt(i-1)!='0'&& s.charAt(i-2)!='0' && (s.charAt(i-2)=='1' || (s.charAt(i-2) == '2' && s.charAt(i-1) <= '6'))){
                result[i] = result[i-1] + result[i-2];
            }
            else if(i>=2 && s.charAt(i-1) == '0')
                result[i] = result[i-2];
            else 
                result[i] = result[i-1];
        }
        //return numDecode(s.toCharArray(), s.length());
        return result[s.length()];
    }
    
    /*
    public int numDecode(char[] arr, int end){
        if(end == 1 || end == 0)
            return 1;
        else{
            if(arr[end-2] == '1' || (arr[end-2] == '2' && arr[end-1] <= '6')){
                return numDecode(arr, end-1) + numDecode(arr, end-2);
            }
            else{
                return numDecode(arr, end-1);
            }
        }
    }
    */
}
