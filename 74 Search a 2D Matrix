[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
  *Integers in each row are sorted from left to right.
  *The first integer of each row is greater than the last integer of the previous row.


网上代码: 把2维数组直接当作一个链,用二分查找法：
Don't treat it as a 2D matrix, just treat it as a sorted list
n * m matrix convert to an array => matrix[x][y] => a[x * m + y]
an array convert to n * m matrix => a[x] =>matrix[x / m][x % m];

class Solution {
public:
    bool searchMatrix(vector<vector<int> > &matrix, int target) {
        int n = matrix.size();
        int m = matrix[0].size();
        int l = 0, r = m * n - 1;
        while (l != r){
            int mid = (l + r - 1) >> 1;
            if (matrix[mid / m][mid % m] < target)
                l = mid + 1;
            else 
                r = mid;
        }
        return matrix[r / m][r % m] == target;
    }
};
