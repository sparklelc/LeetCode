Hard:
239 Sliding Window Maximum
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. 
You can only see the k numbers in the window. Each time the sliding window moves right by one position.
For example,
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Therefore, return the max sliding window as [3,3,5,5,6,7].
移动段，每次返回段内最大值


我的思路：
MaxHeap+HashMap,本质上是实现了删除操作的MaxHeap
复杂度O(n*lgk)

别人思路：
直接用LinkedList，比如[1]，再进来一个3，实际上没必要保存1的索引了，因为3总比1要后出而且3>1
所以linkedlist的结果总是递减的，要找最大元素只需要找linkedlist的头元素
复杂度O(n)



//别人代码
public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(k==0) return new int[0];
        
        LinkedList<Integer> q = new LinkedList<Integer>();       //保存的是index
        int[] res = new int[nums.length-k+1];
        
        for(int i=0; i<nums.length; i++) {
            while(!q.isEmpty() && nums[i]>=nums[q.getLast()])
                q.removeLast();
            q.addLast(i);
            
            if(i-q.getFirst()+1 > k)
                q.removeFirst();
                
            if(i+1 >= k) 
                res[i-k+1] = nums[q.getFirst()];
        }
        return res;
    }
}


**********************************************************************
Mid
241 Different Ways to Add Parentheses
Input: "2*3-4*5"
(2*(3-(4*5))) = -34
((2*3)-(4*5)) = -14
((2*(3-4))*5) = -10
(2*((3-4)*5)) = -10
(((2*3)-4)*5) = 10
Output: [-34, -14, -10, -10, 10]
输出任意加括号情况下所有可能的结果

我的思路：
用stack+递归, 很慢90ms.

别人思路：
用分治+递归, 9ms.
比如加号，加号左边所有可能结果，加上加号右边所有可能结果。

注意：
LinkedList stack = new LinkedList();
while (stack.size() != 0) {
  stack = new LinkedList();     //不要这样写代码，编译器可能会认为判断条件的stack是外面的stack，而不是重新赋值的stack
}

//我的代码
public class Solution {
    ArrayList<Integer> result = new ArrayList<Integer>();
    public List<Integer> diffWaysToCompute(String input) {
        if (input == null) return result;
        findPath(input, 0, new LinkedList<Integer>(), new LinkedList<Character>());
        return result;
    }
    
    public void findPath(String input, int index, LinkedList<Integer> num, LinkedList<Character> p) {
        if (index >= input.length()) {
            if (p.size() == 0) 
                result.add(num.getFirst());
        } else if (input.charAt(index) == ' ') {
            findPath(input, index+1, num, p);
        } else if (input.charAt(index) == '*' || input.charAt(index) == '+' || input.charAt(index) == '-') {
            p.add(input.charAt(index));
            findPath(input, index+1, num, p);
        } else {
            int lastIndex = index+1;
            while (lastIndex<input.length() && input.charAt(lastIndex)>='0' && input.charAt(lastIndex)<='9')
                lastIndex++;
            int item = Integer.valueOf(input.substring(index, lastIndex));
            num.add(item);                                                                        
            findPath(input, lastIndex, new LinkedList<Integer>(num), new LinkedList<Character>(p));    //注意一定要重新new一个
            while (p.size() >= 1) {
                item = num.pollLast();
                int n = num.pollLast();
                char pChar = p.pollLast();
                if (pChar == '*')
                    n = n*item;
                else if (pChar == '-')
                    n = n-item;
                else
                    n = n+item;
                num.addLast(n);
                System.out.println(p.size() + " " + num.getFirst());
                findPath(input, lastIndex, new LinkedList<Integer>(num), new LinkedList<Character>(p));
            }
        }
    }
}

//我参照别人的代码：
public class Solution {
    public List<Integer> diffWaysToCompute(String input) {
        ArrayList<Integer> result = new ArrayList<Integer>();
        for (int i=0; i<input.length(); i++) {
            if (input.charAt(i) == '-' || input.charAt(i) == '*' || input.charAt(i) == '+') {
                List<Integer> resultLeft = diffWaysToCompute(input.substring(0,i));
                List<Integer> resultRight = diffWaysToCompute(input.substring(i+1,input.length()));
                for (int left: resultLeft)
                    for (int right: resultRight) {
                        if (input.charAt(i) == '-') 
                            result.add(left-right);
                        else if (input.charAt(i) == '*') 
                            result.add(left*right);
                        else 
                            result.add(left+right);
                    }
            }
        }
        if (result.size() == 0)                           //这个判断想法比较好
            result.add(Integer.valueOf(input));
        return result;
    }
}


**********************************************************************
Mid
260 Single Number III
Given an array of numbers nums, in which exactly two elements appear only once and 
all the other elements appear exactly twice. Find the two elements that appear only once.
  For example:
  Given nums = [1, 2, 1, 3, 2, 5], return [3, 5]
一个数组里面有两个数只出现一次,而其他数字出现了两次,找出这两个数字.


别人思路：
1. 取得这两个数异或的结果
2. 任取异或结果中的某一个为1的位
3. 如果某个数的该位为1，与result[0]异或，或则与result[1]异或，由于其他数字出现两次，异或后可以抵消其他数字

//参照别人思路我的代码
public class Solution {
    public int[] singleNumber(int[] nums) {
        int diff = 0;
        for (int num: nums)
            diff ^= num;
          
        // int i = 1<<31;         //实际上任意找出某个位置能使两个不同的就行
        // while ((i&diff) == 0)  //找最前面为1的那位
        //     i>>>=1;
        // diff = i;
        
        diff &= -(diff-1);        //或者这样写表示找最后为1的那位
        int[] result = {0, 0};
        for (int num: nums) {
            if ((num & diff) == 0)
                result[0] ^= num;
            else
                result[1] ^= num; 
        }
        return result;
    }
}
