Mid:
Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.
For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:
X X X X
X X X X
X X X X
X O X X

总结：
思路：想找长方形四条边的节点，从边缘节点开始向内扩散
1. 用递归，stack溢出了
2. 后来改成用linkedlist
   （可以不用新建boolean[][]数组，可以直接修改char[][]里面如用‘*’来表示可以保留的节点）



//我的代码
//注意debug是判断if条件是否完整
public class Solution {
    public LinkedList<Integer> storeRow = new LinkedList<Integer>();
    public LinkedList<Integer> storeCol = new LinkedList<Integer>();
    
    public void solve(char[][] board) {
        if (board == null || board.length == 0 || board[0].length == 0)
            return;
            
        boolean[][] survive = new boolean[board.length][board[0].length];
        check(board, survive, 0, board.length, 0, 1);                     //可以不用这么麻烦，直接n*m判断，如果节点是在边缘再压栈操作
        check(board, survive, 0, board.length, board[0].length-1, board[0].length);
        check(board, survive, 0, 1, 0, board[0].length);
        check(board, survive, board.length-1, board.length, 0, board[0].length);
        
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board[0].length; j++) {
                if (board[i][j] == 'O' && !survive[i][j]){
                    board[i][j] = 'X';
                }
            }
        }
    }
    
    public void check(char[][] board, boolean[][] survive, int startRow, int endRow, int startCol, int endCol) {
        for (int i=startRow; i<endRow; i++) {
            for (int j=startCol; j<endCol; j++) {
                if (board[i][j] == 'O' && !survive[i][j]) {
                    survive[i][j] = true;
                    storeRow.addLast(i);
                    storeCol.addLast(j);
                }
            }
        }
        while(storeRow.size() != 0) {
            int i = storeRow.pollFirst();
            int j = storeCol.pollFirst();
            check(board, survive, i, j);
        }
    }
    
    public void check(char[][] board, boolean[][] survive, int row, int col) {
        if (row-1 >= 0 && !survive[row-1][col] && board[row-1][col] == 'O') {     //一开始忘了判断board[row-1][col] == 'O'，debug了很久
            survive[row-1][col] = true;                                          //这些重复的代码可以写成子函数
            storeRow.add(row-1);
            storeCol.add(col);
        }
        if (col-1 >= 0 && !survive[row][col-1] && board[row][col-1] == 'O') {
            survive[row][col-1] = true;
            storeRow.add(row);
            storeCol.add(col-1);
        }
        if (row+1 < board.length  && !survive[row+1][col] && board[row+1][col] == 'O') {
            survive[row+1][col] = true;
            storeRow.add(row+1);
            storeCol.add(col);
        }
        if (col+1 < board[0].length  && !survive[row][col+1] && board[row][col+1] == 'O') {
            survive[row][col+1] = true;
            storeRow.add(row);
            storeCol.add(col+1);
        }
        
    }
}
