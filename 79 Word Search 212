Easy-Mid
题目：Given board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.

我的代码：递归，回溯
public class Solution {
    public boolean exist(char[][] board, String word) {
        if(board.length == 0)
            return false;
            
        boolean[][] used = new boolean[board.length][board[0].length];    
        for(int i=0;i<board.length;i++){
            for(int j=0; j<board[0].length;j++)
                if(find(board,word,0,i,j,used))
                    return true;
        }
        return false;
    }
    
    public boolean find(char[][]board, String word, int index, int i, int j, boolean[][] used){
        boolean result = false;
        if(index==word.length())
            return true;
        if(i<0 || i>=board.length || j<0 || j>=board[0].length || used[i][j])
            return false;
        if(board[i][j] != word.charAt(index))
            return false;
        used[i][j] = true;
        result = find(board, word, index+1, i+1, j, used) || find(board, word, index+1, i-1, j, used) || find(board, word, index+1, i, j+1, used) || find(board, word, index+1, i, j-1, used);
        if(!result)
            used[i][j] = false;
        return result;
    }
}



***************************************************************************************
Hard:
212 Word Search II
找出所有出现过的字符串
Given words = ["oath","pea","eat","rain"] and board =
  [
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
  ]
Return ["eat","oath"].


关键：
用Trie合并被查找的元素，比如“aab，aaa，aac”都有相同的前缀，合并后对比次数要比每个单词逐字母对比的效率要高的多


//参照别人我的代码
public class Solution {
    Node root = new Node();
    ArrayList<String> list = new ArrayList<String>();
    
    public List<String> findWords(char[][] board, String[] words) {
        for (String word: words)
            appendTrie(word);

        boolean[][] isUsed = new boolean[board.length][board[0].length];
        for (int i=0; i<board.length; i++)
            for (int j=0; j<board[0].length; j++)
                find(board, i, j, isUsed, root, "");

        return list;
    }
    
    public void find(char[][] board, int r, int c, boolean[][] isUsed, Node node, String str) {
        if (r<0 || c<0 || r>=board.length || c >= board[0].length || isUsed[r][c])
            return;
        
        str += board[r][c];                                              //当前路径的string
        int id = board[r][c]-'a';
        if (node.child[id] != null) {
            if (node.child[id].isWord) {
                list.add(str);
                node.child[id].isWord = false;
            }
            isUsed[r][c] = true;
            find(board, r-1, c, isUsed, node.child[id], str);
            find(board, r+1, c, isUsed, node.child[id], str);
            find(board, r, c-1, isUsed, node.child[id], str);
            find(board, r, c+1, isUsed, node.child[id], str);
            isUsed[r][c] = false;
        }
    }
    
    public void appendTrie(String word) {
        Node node = root;
        for (int i=0; i<word.length(); i++) {
            int id = word.charAt(i)-'a';
            if (node.child[id] == null)
                node.child[id] = new Node();
            node = node.child[id];
        }
        node.isWord = true;
    }
}

class Node {
    Node[] child = new Node[26];
    boolean isWord = false;
}
