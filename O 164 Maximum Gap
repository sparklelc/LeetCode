Hard:
Given an unsorted array, find the maximum difference between the successive elements in its sorted form.
Try to solve it in linear time/space.
Return 0 if the array contains less than 2 elements.
You may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.
给无序的数组,找出连续的最大间隔. 要求O(n)


思路:
还是要排序来做，要求O(n)，可以用"桶排序"，关键是要用多少个桶
1. 遍历一次，找处最大和最小的元素maxInt, minInt
2. 最大间隔不会小于seg = (maxInt - minInt)/(n-1)
3. 分成n个段，(如[1，2]，第一个段[1，2), 第二个段[2,X).)
4. 记录每个段的最大和最小元素
5. 从左向右, 找左边段的最大值和右边段的最小值的最大间隔.

附：基数排序Radix Sort


//参照别人思路我的代码
public class Solution {
    public int maximumGap(int[] nums) {
        if (nums == null || nums.length < 2)
            return 0;
        int[] min = new int[nums.length+1];
        int[] max = new int[nums.length+1];
        int maxInt = 0;
        int minInt = Integer.MAX_VALUE;
        for (int num: nums) {
            if (num > maxInt)
                maxInt = num;
            if (num < minInt)
                minInt = num;
        }
        
        double slot = (maxInt - minInt) / (nums.length-1.0);
        if (slot == 0)
            return 0;
        for (int num: nums) {
            int index = (int) ((num - minInt) / (slot));
            if (min[index] == 0 || min[index] > num) {
                min[index] = num;
            }
            if (max[index] == 0 || max[index] < num) {
                max[index] = num;
            }
        }
        
        int last = max[0];
        int result = (maxInt-minInt)/(nums.length-1);
        for (int i=0; i<=nums.length; i++) {
            if (min[i] != 0 && min[i] != last) {
                result = Math.max(result, min[i] - last);
                last = max[i];
            }
        }
        return result;
    }
}



**************************

基数排序, 一定是稳定的, 因为如百位排序是在十位排序基础上.
    见: http://www.acmerblog.com/radix-sorting-5601.html

public class RadixSorting {
	private static void radixSorting(int[] arr, int d) {      // d为数据长度，如[211, 333], d=3
		for (int i = 0; i < d; i++) {
			arr = countingSort(arr, i);                       // 依次对各位数字排序（直接用计数排序的变体）
			print(arr, i + 1, d);
		}
	}

	// 利用计数排序对元素的每一位进行排序
	private static int[] countingSort(int[] arr, int expIndex) {
		int k = 9;
		int[] b = new int[arr.length];
		int[] c = new int[k + 1];                             // 10进制

		for (int i = 0; i < k; i++) {
			c[i] = 0;
		}
		for (int i = 0; i < arr.length; i++) {
			int d = getBitData(arr[i], expIndex);
			c[d]++;
		}
		for (int i = 1; i <= k; i++) {
			c[i] += c[i - 1];                                // 相加
		}
		for (int i = arr.length - 1; i >= 0; i--) {
			int d = getBitData(arr[i], expIndex);
			b[c[d] - 1] = arr[i];                            // C[d]-1 就代表小于等于元素d的元素个数，就是d在B的位置
			c[d]--;
		}
		return b;
	}

	private static int getBitData(int data, int expIndex) {     // 获取data指定位的数
		while (data != 0 && expIndex > 0) {
			data /= 10;
			expIndex--;
		}
		return data % 10;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr = new int[] { 326, 453, 608, 835, 751, 435, 704, 690, 88, 79, 79 };
		System.out.println("基数排序前为：");
		for (int t : arr) {
			System.out.print(t + " ");
		}
		System.out.println();
		radixSorting(arr, 4);
	}
}
