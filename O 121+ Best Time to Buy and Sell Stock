Easy:
Say you have an array for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction 
       (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.


注意只需要用动态规划存以前的最小值，然后用今天的值减以前的最小值


// 我的代码
public class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length == 0)
            return 0;
        int[] min = new int[prices.length];
        int best = 0;
        
        min[0] = prices[0];
        for(int i=1; i<prices.length; i++) {
            min[i] = Math.min(prices[i], min[i-1]);
            int thisResult = prices[i] - min[i];
            if (thisResult > best)
                best = thisResult;
        }
        return best;
    }
}


##########
题目122:
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like 
(ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time 
(ie, you must sell the stock before you buy again).


关键在于持有几天的股票也可以看成是当天卖再买回来，所有判断条件就变成了今天和明天相比是否有盈利，有就买，没有就不买

// 我的代码
public class Solution {
    public int maxProfit(int[] prices) {
        int result = 0;
        if (prices.length == 0)
            return result;
        
        for(int i=1; i<prices.length; i++) {
            if (prices[i] > prices[i-1]) 
                result += prices[i] - prices[i-1];
        }
        return result;
    }
}
