##########
Easy:
Say you have an array for which the ith element is the price of a given stock on day i.    美国股市：可以当天买当天卖
If you were only permitted to complete at most one transaction 
       (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.


注意只需要用动态规划存以前的最小值，然后用今天的值减以前的最小值


// 我的代码
public class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length == 0)
            return 0;
        int[] min = new int[prices.length];
        int best = 0;
        
        min[0] = prices[0];
        for(int i=1; i<prices.length; i++) {
            min[i] = Math.min(prices[i], min[i-1]);
            int thisResult = prices[i] - min[i];
            if (thisResult > best)
                best = thisResult;
        }
        return best;
    }
}


#######################################################
题目122 Mid:
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like 
(ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time 
(ie, you must sell the stock before you buy again).


关键在于持有几天的股票也可以看成是当天卖再买回来，所有判断条件就变成了今天和明天相比是否有盈利，有就买，没有就不买

// 我的代码
public class Solution {
    public int maxProfit(int[] prices) {
        int result = 0;
        if (prices.length == 0)
            return result;
        
        for(int i=1; i<prices.length; i++) {
            if (prices[i] > prices[i-1]) 
                result += prices[i] - prices[i-1];
        }
        return result;
    }
}



##################################################
题目123 Hard:
Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete at most two transactions. 最多做两次交易


直接用指针遍历一次应该是做不了的，应该要用动态规划O(n)
用动态规划做，关键在于只需要求出时间段（0，j）和(j, length-1)中的最高收益, 而我之前把所有(i,j,k)的都求出来了，所以超时.
其实不需要考虑起点和终点，考虑中间结点已经够了。


// 我参照别人写的代码
public class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length == 0) 
            return 0;
            
        int[] pre = new int [prices.length];
        int[] back = new int [prices.length];
        
        int[] min = new int [prices.length];
        min[0] = prices[0];
        for(int i=1; i<prices.length; i++) {
            min[i] = Math.min(min[i-1], prices[i]);
            pre[i] = Math.max(pre[i-1], prices[i]-min[i]);
        }
        
        int[] max = new int [prices.length];
        max[prices.length-1] = prices[prices.length-1];
        for(int i=prices.length-2; i>=0; i--) {
            max[i] = Math.max(max[i+1], prices[i]);
            back[i] = Math.max(back[i+1], max[i]-prices[i]);
        }
        
        int best = 0;
        for(int i=0; i<prices.length; i++) {
            best = Math.max(pre[i] + back[i], best);
        }
        return best;
    }
}



#########################################################
题目188 Hard:
188 Best Time to Buy and Sell Stock IV:
Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete at most k transactions.
和上题不同的是,上面可以做两次交易,而这里可以做K次交易.



思路：
动归，时间复杂度O(k*n)
  local[t][i]  表示i天，刚好第i天完成第t次交易的卖出，这种情况下的最大收益。
  glocal[t][i] 表示i天，完成t次交易                   这种情况下的最大收益。
有：
  local[t][i] = Math.max(local[t][i-1]+benefit, global[t-1][i-1]+Math.max(0, benefit))
  global[t][i] = Math.max(local[t][i], global[t][i-1])
其中benefit = prices[i] - prices[i-1]。表示昨天买入，今天卖出的收益。




参照：
http://blog.csdn.net/feliciafay/article/details/45128771
// 参照别人我的代码：
public class Solution {
    public int maxProfit(int k, int[] prices) {
        int result = 0;
        if (2 * k > prices.length) {                        //需要对特殊情况做优化处理，不然会超时或超过Memory限制
            for (int i=1; i<prices.length; i++) {
                int tem = prices[i] - prices[i-1];
                result += tem < 0? 0: tem; 
            }
            return result;
        }
        
        int[][] local = new int[k+1][prices.length+1];
        int[][] global = new int[k+1][prices.length+1];
        for (int t=1; t<=k; t++) {                                      // t -> transaction
            for (int i=1; i<=prices.length; i++) {                      // i -> date
                int benefit = i==1? 0: prices[i-1]-prices[i-2];
                local[t][i] = Math.max(local[t][i-1]+benefit, global[t-1][i-1]+Math.max(0, benefit));
                global[t][i] = Math.max(local[t][i], global[t][i-1]);
            }
        }
        return global[k][prices.length];
    }
}
