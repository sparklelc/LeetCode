Hard:
282 Expression Add Operators
    Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators 
  (not unary) +, -, or * between the digits so they evaluate to the target value.
Examples: 
  "123", 6 -> ["1+2+3", "1*2*3"] 
  "232", 8 -> ["2*3+2", "2+3*2"]
  "105", 5 -> ["1*0+5","10-5"]
  "00", 0 -> ["0+0", "0-0", "0*0"]
  "3456237490", 9191 -> []
  
我的思路：
找出所有string，找完后判断每个string的结果是否与target相同
beat 0.83% 慢

别人思路：
缓存前面的结果

//别人代码
public class Solution {
    List<String> res;
    public List<String> addOperators(String num, int target) {
        helper(num, target, "", 0, 0);
        return res;
    }
    
    private void helper(String num, int target, String tmp, long currRes, long prevNum){
        // 如果计算结果等于目标值，且所有数都用完了，则是有效结果
        if(currRes == target && num.length() == 0){
            String exp = new String(tmp);
            res.add(exp);
            return;
        }
        // 搜索所有可能的拆分情况
        for(int i = 1; i <= num.length(); i++){
            String currStr = num.substring(0, i);
            // 对于前导为0的数予以排除
            if(currStr.length() > 1 && currStr.charAt(0) == '0'){
                // 这里是return不是continue
                return;
            }
            // 得到当前截出的数
            long currNum = Long.parseLong(currStr);
            // 去掉当前的数，得到下一轮搜索用的字符串
            String next = num.substring(i);
            // 如果不是第一个字母时，可以加运算符，否则只加数字
            if(tmp.length() != 0){
                // 乘法
                helper(next, target, tmp+"*"+currNum, (currRes - prevNum) + prevNum * currNum, prevNum * currNum);
                // 加法
                helper(next, target, tmp+"+"+currNum, currRes + currNum, currNum);
                // 减法
                helper(next, target, tmp+"-"+currNum, currRes - currNum, -currNum); 
            } else {
                // 第一个数
                helper(next, target, currStr, currNum, currNum);
            }
        }
    }
}


************************************************************
Hard:
287 Find the Duplicate Number
Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), 
prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.
Note:
You must not modify the array (assume the array is read only).
You must use only constant, O(1) extra space.
Your runtime complexity should be less than O(n2).
There is only one duplicate number in the array, but it could be repeated more than once.
找出重复的数(可以重复多次)

别人思路:
类似于链表找环交点，复杂度O(n).
由于index范围是0-n，而数字范围是1-n,所以从index=0开始找理论上只有有重复数字的时候才会形成环路，而重复数字就是环交点.
另外一种方法是二分查找，复杂度O(nlgn)，判断比某个数大的元素的个数。

//参照别人思路我的代码
public class Solution {
    public int findDuplicate(int[] nums) {
        if (nums == null || nums.length < 2) return -1;
        int fast = nums[nums[0]];
        int slow = nums[0];
        while (fast != slow) {
            fast = nums[nums[fast]];
            slow = nums[slow];
        }
        fast = 0;
        while (fast != slow) {
            fast = nums[fast];
            slow = nums[slow];
        }
        return slow;
    }
}


*****************************************************************************
295 Find Median from Data Stream
Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. 
So the median is the mean of the two middle value.
     找中位数,设计支持'插入'和'找中位数'的数据结构
Examples: 
[2,3,4] , the median is 3
[2,3], the median is (2 + 3) / 2 = 2.5
Design a data structure that supports the following two operations:
     void addNum(int num) - Add a integer number from the data stream to the data structure.
     double findMedian() - Return the median of all elements so far.

我的思路:
双向链表,记录中间位置,插入操作时间复杂度O(n),查找操作时间复杂度O(1)

别人思路：
两个堆,插入操作时间复杂度O(lgn)，查找操作时间复杂度O(1)

//我参照别人思路的代码：
public class MedianFinder {
    int size = 0;
    PriorityQueue<Integer> pre = new PriorityQueue<Integer>(new Comparator<Integer>(){
        @Override
        public int compare(Integer o1, Integer o2) {
            return -o1.compareTo(o2);
        }
    });
    PriorityQueue<Integer> next = new PriorityQueue<Integer>(new Comparator<Integer>(){
        @Override
        public int compare(Integer o1, Integer o2) {
            return o1.compareTo(o2);
        }
    });
    
    public void addNum(int num) {
        if (size % 2 == 1) {
            if (next.peek() == null || next.peek() > num) {
                pre.add(num);
                next.add(pre.poll());
            } else {
                next.add(num);
            }
        } else {
            if (pre.peek() == null || next.peek() >= num) {
                pre.add(num);
            } else {
                pre.add(next.poll());
                next.add(num);
            }
        }
        size++;
    }

    public double findMedian() {
        return size%2==1 ? pre.peek(): (pre.peek()+next.peek())/2.0;
    }
};

//别人代码，更加简洁
class MedianFinder {
    private Queue<Long> small = new PriorityQueue(),
                        large = new PriorityQueue();

    public void addNum(int num) {
        large.add((long) num);
        small.add(-large.poll());
        if (large.size() < small.size())
            large.add(-small.poll());
    }

    public double findMedian() {
        return large.size()>small.size() ? large.peek() : (large.peek()-small.peek())/2.0;
    }
};


***************************************************
Mid
297 Serialize and Deserialize Binary Tree
序列化和反序列化Binary Tree

我的思路:
用LinkedList<>来作为stack，逐层处理.

别人思路：
递归，时间会快一点.

***************************************************
Easy
299 Bulls and Cows
For example:
  Secret number:  "1807"
  Friend's guess: "7810"
  Hint: 1 bull and 3 cows. 

我的思路：
第一遍记录相同的元素和记录不同的出现过的元素次数，第二次获取出现过的不同元素中相同的

别人思路：
一次遍历，如果两个元素不同，上面元素的count++，下面元素的count--，如果之前上面元素的count<0，说明有匹配。
