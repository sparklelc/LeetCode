Mid:
221 Maximal Square
找最大的正方形
Given a 2D binary matrix filled with 0's and 1's, find the largest square containing all 1's and return its area.
For example, given the following matrix:
  1 0 1 0 0
  1 0 1 1 1
  1 1 1 1 1
  1 0 0 1 0
Return 4.


我的思路：
  动态规划
  arr[i][j] = Math.min(arr[i-1][j], arr[i][j-1], arr[i-1][j-1])+1    if matrix[i][j]=='1'
            = 0                                                      if matrix[0][0]=='0'
扩展：如果是长方形应该是不能做的。


//我的代码
public class Solution {
    public int maximalSquare(char[][] matrix) {
        int result = 0;
        if (matrix == null || matrix.length == 0) return result;
        int[][] arr = new int[matrix.length+1][matrix[0].length+1];
        for (int i=1; i<=matrix.length; i++) 
            for (int j=1; j<=matrix[0].length; j++) {
                if (matrix[i-1][j-1] == '0')
                    arr[i][j] = 0;
                else {
                    arr[i][j] = Math.min(Math.min(arr[i-1][j], arr[i][j-1]), arr[i-1][j-1])+1;
                    result = Math.max(result, arr[i][j]);
                }
            }
        return result*result;
    }
}


**********************************************************************
Mid
222 Count Complete Tree Nodes
Given a complete binary tree, count the number of nodes.

我的思路:
用二分查找加上hashmap来避免重复查找结点，超时，主要是hashmap太耗时，O(lgn*lgn)

别人思路：
递归+二分查找，O(lgn*lgn)，如果最左子结点的高度和最右子结点的高度不同，再分别判断左子树和右子树。

//我参照别人思路的代码
public class Solution {
    public int countNodes(TreeNode root) {
        return findCount(root, -1, -1);
    }
    
    public int findCount(TreeNode root, int leftH, int rightH) {
        if (root == null) return 0;
        int leftHeight = leftH == -1? findHeight(root, 0): leftH;                       //找最左子结点的高度
        int rightHeight = rightH == -1? findHeight(root, 1): rightH;                    //找最右子结点的高度
        if (leftHeight == rightHeight)
            return (1<<leftHeight)-1;                                         //移位符号<<的优先级比-号小(也比==小)，所以要加括号
        else {
            return 1 + findCount(root.left, leftHeight-1, -1) + findCount(root.right, -1 ,rightHeight-1);
        }
    }
    
    public int findHeight(TreeNode root, int t) {     //t=0表示向左找，t=1表示向右找
        int h = 0;
        while (root != null) {
            root = t==0? root.left: root.right;
            h++;
        }
        return h;
    }
}


************************************************************
Easy
223 Rectangle Area
给出两个长方形的坐标，求出它们的面积（重叠面积只计算一次）

我的思路：
根据两个长方形的最小的最右边界和最大的最左边界判断是否有重叠。

public class Solution {
    public int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {
        long total = ((long)C-A)*((long)D-B) + ((long)G-E)*((long)H-F);
        long replicate_length = (long)Math.min(C,G)-Math.max(A,E)>0? (long)Math.min(C,G)-Math.max(A,E): 0;
        long replicate_height = (long)Math.min(D,H)-Math.max(B,F)>0? (long)Math.min(D,H)-Math.max(B,F): 0;
        total -= replicate_length*replicate_height;
        return (int) total;
    }
}



************************************************************
Hard
224 Basic Calculator
Implement a basic calculator to evaluate a simple expression string.
The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers 
and empty spaces .
You may assume that the given expression is always valid.

Some examples:
"1 + 1" = 2
" 2-1 + 2 " = 3
"(1+(4+5+2)-3)+(6+8)" = 23
实现包含(,),+,-符号的计算器



我的思路：
用stack来处理，每遇到一个'('进入一个新层，遇到')'跳回上一层
一个stack保存每层的数字值，一个stack保存'+','-'符号


//我的代码：
public class Solution {
    public int calculate(String s) {
        LinkedList<Long> stack = new LinkedList<Long>();
        LinkedList<Character> stackP = new LinkedList<Character>();
        stack.add(0L);
        stackP.add('+');
        for (int i=0; i<s.length(); i++) {
            if (s.charAt(i) == ' ')
                continue;
            if (s.charAt(i) == '(') {
                stack.add(0L);                                      //进入新层时添加 “(0 + .....
                stackP.add('+');
            }
            else if (s.charAt(i) == ')') {
                long v = stack.pollLast();
                stack.add(stackP.pollLast()=='+'? stack.pollLast()+v: stack.pollLast()-v);
            } else if (s.charAt(i) == '+' || s.charAt(i) == '-')
                stackP.add(s.charAt(i));
            else {
                int lastIndex = i+1;
                while (lastIndex < s.length() && s.charAt(lastIndex) <= '9' && s.charAt(lastIndex) >= '0')
                    lastIndex ++;
                int tem = Integer.valueOf(s.substring(i, lastIndex));
                stack.add(stackP.pollLast()=='+'? stack.pollLast()+tem: stack.pollLast()-tem);
                i = lastIndex-1;
            }
        }
        return (int) stack.pollLast().longValue();
    }
}

***************************************************
227 Basic Calculator II
Implement a basic calculator to evaluate a simple expression string.
The expression string contains only non-negative integers, +, -, *, / operators and empty spaces ' '.
The integer division should truncate toward zero.
You may assume that the given expression is always valid.

Some examples:
"3+2*2" = 7
" 3/2 " = 1
" 3+5 / 2 " = 5

我的思路：
双向链表，先处理乘法，再处理加减法

//我的代码：
public class Solution {
    public int calculate(String s) {
        LinkedList<Long> num = new LinkedList<Long>();
        LinkedList<Character> pStack = new LinkedList<Character>();
        num.add(0L);
        pStack.add('+');
        for (int i=0; i<s.length(); i++) {
            if (s.charAt(i) == ' ')
                continue;
            else if (s.charAt(i) == '+' || s.charAt(i) == '-' || s.charAt(i) == '*' || s.charAt(i) == '/')
                pStack.add(s.charAt(i));
            else {
                int nextIndex = i + 1;
                while (nextIndex < s.length() && s.charAt(nextIndex) >= '0' && s.charAt(nextIndex) <= '9')
                    nextIndex++;

                long thisNum = Long.valueOf(s.substring(i, nextIndex));
                if (pStack.getLast() == '*' || pStack.getLast() == '/') 
                    thisNum = pStack.pollLast()=='*'? num.pollLast()*thisNum: num.pollLast()/thisNum;
                num.add(thisNum);
                i = nextIndex-1;
            }
        }
        while (num.size() != 1) {                     //处理加减法，顺序是从左到右
            long tem = num.pollFirst();
            long result = pStack.pollFirst()=='+' ? tem+num.pollFirst(): tem-num.pollFirst();
            num.addFirst(result);
        }
        return (int) num.getLast().longValue();
    }
}


***************************************************
Easy:
228 Summary Ranges
Given a sorted integer array without duplicates, return the summary of its ranges.
For example, given [0,1,2,4,5,7], return ["0->2","4->5","7"].

我的思路：
一次遍历，判断是否比前一个元素大1, 时间复杂度为O(n)

别人思路：
可以用二分搜索来做，通过判断两个元素之间的差值是否等于它们index之间的差值，时间复杂度最好为O(1),最坏为O(nlgn)
