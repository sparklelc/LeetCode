Mid
229 Majority Element II
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. 
The algorithm should run in linear time and in O(1) space.
找出出现1/3次以上的数字,要求时间复杂度O(n),空间复杂度O(1)


我的思路：
和找出现1/2次的数字思路差不多（那题是已经知道存在有个数字出现超1/2，而这里不知道是否存在），
如果数字出现过，count加一。否则去掉三个不同的数。
但关键是剩下的结果不一定是最终的结果，比如[1,2,3,4]返回4，但4不满足条件。
所以需要再从头遍历一次候选结果，统计它的出现次数看是否超过1/3.
称为Majority Vote Algorithm，分两步做，第一找候选结果，第二判断候选结果是否满足条件。



//我的代码：
public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        ArrayList<Integer> result = new ArrayList<Integer>();
        Integer[] index = {null, null};
        int[] count = {0, 0};
        for (int i=0; i<nums.length; i++) {
            Integer item = new Integer(nums[i]);
            if (item.equals(index[0])) {
                count[0] ++;
            } else if (item.equals(index[1]) || count[1] == 0) {
                index[1] = item;
                count[1] ++;
            } else if (count[0] == 0) {
                count[0] ++;
                index[0] = item;
            } else {
                count[0] --;
                count[1] --;
            }
        }
        count[0] = 0;
        count[1] = 0;
        for (int i=0; i<nums.length; i++) {       //需要再遍历一次这里我一开始没想到
            Integer item = new Integer(nums[i]);
            if (item.equals(index[0]))
                count[0] ++;
            if (item.equals(index[1]))
                count[1] ++;
        }
        if (count[0] > nums.length/3.0)
            result.add(index[0]);
        if (count[1] > nums.length/3.0)
            result.add(index[1]);
        return result;
    }
}

*************************************************************
Easy
230 Kth Smallest Element in a BST
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.
在二叉搜索树（非平衡）中找出第k小的数

我的思路：
关键在于遍历中如果已经找到结果了，如何快速返回，而不再去做其它无用的判断。
我的做法是返回一个特殊值表示结果已经找到，把结果设成全局变量


//我的代码：
public class Solution {
    public int result = 0;
    public int kthSmallest(TreeNode root, int k) {
        findK(root, k);
        return result;
    }
    
    public int findK(TreeNode root, int k) {
        if (root == null)
            return 0;
            
        int left = findK(root.left, k);
        if (left == Integer.MIN_VALUE) {                        //表示结果已经找到
            return Integer.MIN_VALUE;
        } else if (left+1 == k) {
            result = root.val;
            return Integer.MIN_VALUE;
        } else {
            int right = findK(root.right, k-left-1);
            if (right == Integer.MIN_VALUE)
                return Integer.MIN_VALUE;
            else
                return left + right + 1;
        }
    }
}



*************************************************************
Mid
233 Kth Smallest Element in a BST
Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.
For example:
Given n = 13,
Return 6, because digit 1 occurred in the following numbers: 1, 10, 11, 12, 13.
计算小于等于某个数字的所有数字中'1'出现的次数

我的思路：
递归
比如(2333)变成判断2*(999)+(333)+(千位数为1的个数)

//我的代码
public class Solution {
    public int countDigitOne(int n) {
        if (n <= 0) return 0;
        if (n <= 9) return 1;
        int item = 1000000000;
        while (n/item == 0 && item != 1)
            item /= 10;
        return (n/item)*countDigitOne(item-1) + countDigitOne(n%item) + Math.min(item, 1+n-item);
    }
}


******************************************************************
Easy
234 Palindrome Linked List
Given a singly linked list, determine if it is a palindrome.
Could you do it in O(n) time and O(1) space?
判断一个链表是不是回文，要求O(n)时间和O(1)空间复杂度

我的思路：
用快慢指针来处理，把前面的node倒序排列

//我的代码
public class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode slow = head;
        ListNode fast = head == null? null: head.next;
        ListNode head2 = null;                                  //表示前面结点的倒序
        ListNode head1 = null;                                  //表示后面结点
        while (fast != null) {
            ListNode slowNext = slow.next;
            slow.next = head2;
            head2 = slow;
            head1 = slowNext;
            slow = slowNext;
            if (fast.next != null && fast.next.next == null) {
                head1 = slowNext.next;
                break;
            } else
                fast = fast.next == null? null: fast.next.next;
        }
        while (head1 != null) {                                 //前后链表的结点一一比较
            if (head1.val != head2.val) return false;
            head1 = head1.next;
            head2 = head2.next;
        }
        return true;
    }
}


*****************************************************
Mid
236 Lowest Common Ancestor of a Binary Tree
        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4
For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. 
Another example is LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.

我的思路:
递归找,保存每个结点的路径链表,找到了把全局变量find设置成true
注意：题目没说每个结点的val值互不相同，所以只能用TreeNode引用来判断结点，而不能用val值来判断结点。

别人思路：
其实没有必要保存路径，直接递归找就可以，如果某一结点等于root, 说明root是LCA, 如果两个都不等于root，再分别判断左右子树。

//我的代码:
public class Solution {
    boolean find1 = false;
    boolean find2 = false;
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        LinkedList<TreeNode> tree1 = new LinkedList<TreeNode>();
        LinkedList<TreeNode> tree2 = new LinkedList<TreeNode>();
        find(root, tree1, tree2, p, q);
        TreeNode result = null;
        while (tree2.size() >= 1 && tree1.size() >= 1 && tree1.getFirst() == tree2.getFirst()) {
            result = tree1.getFirst();
            tree1.removeFirst();
            tree2.removeFirst();
        }
        return result;
    }
    
    public void find(TreeNode root, LinkedList<TreeNode> tree1, LinkedList<TreeNode> tree2, TreeNode val1, TreeNode val2) {
        if (root != null) {
            if (!find1) tree1.add(root);
            if (!find2) tree2.add(root);
            if (root == val1) find1 = true;
            if (root == val2) find2 = true;
            if (!find1 || !find2) find(root.left, tree1, tree2, val1, val2);
            if (!find1 || !find2) find(root.right, tree1, tree2, val1, val2);
            if (!find1) tree1.removeLast();
            if (!find2) tree2.removeLast();
        }
    }
}

//根据别人思路我的代码
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null || p == root || q == root) 
            return root;
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        if (left != null && right != null)
            return root;
        return left == null? right: left;
    }
}
