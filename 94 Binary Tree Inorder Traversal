Easy:
题目：Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree,
   1
    \
     2
    /
   3
return [1,3,2]

题目很简单，用递归很容易做，当然要提高性能的话要用Stack的非递归形式。

别人的stack非递归代码：
public List<Integer> inorderTraversal(TreeNode root) {
    List<Integer> list = new ArrayList<Integer>();

    Stack<TreeNode> stack = new Stack<TreeNode>();
    TreeNode cur = root;

    while(cur!=null || !stack.empty()){
        while(cur!=null){
            stack.add(cur);
            cur = cur.left;
        }
        cur = stack.pop();
        list.add(cur.val);
        cur = cur.right;
    }

    return list;
}

我的递归代码：
public class Solution {
    public ArrayList<Integer> result = new ArrayList<Integer>();
    
    public List<Integer> inorderTraversal(TreeNode root) {
        if (root == null)
            return result;
        inorderTraversal(root.left);
        result.add(root.val);
        inorderTraversal(root.right);
        return (List<Integer>) result;
    }
}
