题目-Mid：
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.
For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3.

网上的代码：比我好的地方在于他用的是cur指针，然后用while判断和下一个指针是否相同
此外创建了一个初始结点
public ListNode deleteDuplicates(ListNode head) {
        if(head==null) return null;
        ListNode FakeHead=new ListNode(0);
        FakeHead.next=head;
        ListNode pre=FakeHead;
        ListNode cur=head;
        while(cur!=null){
            while(cur.next!=null&&cur.val==cur.next.val){
                cur=cur.next;
            }
            if(pre.next==cur){
                pre=pre.next;
            }
            else{
                pre.next=cur.next;
            }
            cur=cur.next;
        }
        return FakeHead.next;
    }
    
我的代码：
public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode last = null;
        ListNode result = null;
        ListNode temresult = null;
        ListNode nextnode = head;
        boolean same = false;
        
        if(nextnode != null){
            last = nextnode;
            nextnode = nextnode.next;
        }
        else{
            return head;
        }
        
        while(nextnode != null){
            if(nextnode.val == last.val){
                same = true;
            }
            else{
                if(same){
                    last = nextnode;
                }else{
                    if(result == null){
                        result = last;
                        temresult = result;
                    }else{
                        temresult.next = last;
                        temresult = temresult.next;
                    }
                }
                last = nextnode;
                same = false;
            }
            nextnode = nextnode.next;  
            if(nextnode != null)
                System.out.print(nextnode.val);
        }
        if(!same){
            if(result == null){
                result = last;
                temresult = result;
            }else{
                temresult.next = last;
                temresult = temresult.next;
            }
        }
        if(temresult !=null)
            temresult.next = null;
        
        return result;
    }
}
