Mid题目：
和上一题一样，不过这个题目要求算树的数目，而不是像上题一样把所有的树给输出出来。
For example,
Given n = 3, return 5
   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   

和上题不同的地方在于这题有更好的方法，因为可以用动态规划来做。


别人的代码：
class Solution {
public:
    int numTrees(int n) {
        vector<int> DP(n+1, 0);
        DP[0] = 1;
        int i, j;
        for(i=1; i<=n; i++)
            for(j=1; j<=i; j++)
                DP[i] = DP[i] + DP[j-1]*DP[i-j];
        return DP[n];
    }
};


我的动归代码，不够简洁：
public class Solution {
    int[] num;
    public int numTrees(int n) {
        if(n == 0)
            return 0;
        else{
            num = new int[n];
            for(int i=0; i<n; i++)
                num[i] = -1;
            return num(1, n);
        }
    }
    
    public int num(int min, int max){
        int sum = 0;
        if(min>max)
            return 1;
        else if(min == max)
            return 1;
        else{
            if(num[max-min] != -1)
                return num[max-min];
            for(int i=min; i<=max; i++){
                int left = num(min, i-1);
                int right = num(i+1, max);
                sum += left * right;
            }
        }
        num[max-min] = sum;
        return sum;
    }
}
